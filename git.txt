CONFIGURE GIT
git config --global	user.name "my_name"						configure user global settings (name)
git config --global	user.email "user@provider.com"			configure user global settings (mail)
git config --global core.editor "vim"						configure default text editor
git config --global color.ui true							enable colors in git terminal
git config --global sendemail.smtpuser x@y.z
git config --global sendemail.smtpserver smtp.googlemail.com (for gmail)
git config --global sendemail.smtpencryption tls
git config --global sendemail.smtpserverport 587

all the configurations are saved in the .gitconfig file in the folder where we configured the user

PROJECT
mkdir project
cd project

INITIALIZE REPOSITORY
git init				telling git to track every change on the project. It creates .git folder

to stop tracking the project, delete .git folder

TERMINOLOGY
repository			remote (or local) location of the project....good copy 
working directory 	location where we are allowed to make changes, experiments, weirdness....junkie copy
staging index 		temporary location where we put our copy when we think it's ready but must be reviewed first

check-out	bring the content of a repository into a working directory
add			bring the content of a working directory into a staging index
commit		bring the content of a staging index into a repository

branch		version sent to repository

HEAD POINTER	HEAD is a pointer that points to the top of the current branch in the repository (is the last checked out state). 
				It is going to be the parent of the next commit

THE COMMIT CHAIN
The commit package is similar to a node of a linked list. In this linked list, a node is added in head and so the head points 
to the latest commit done and every node points to the older head when it got inserted

ADD FILES
git add . 							put everything in this folder into the staging index
git add file.txt					send only file.txt to the stanging index

DELETE FILES FROM GIT
git rm file					delete file from working directory

RENAME FILES FROM GIT
git mv file newFile			rename file to newFile and put it on the staging area

COMMIT
Package of data and description (from where git creates a unique checksum) sent to the main repository.

git commit -m "description"			send all the data contained in the staging index to the repository
git commit -m "description" -s		sign-off the commit

STATUS AND REPO INFORMATIONS
git log								show all the commits done so far
git log --oneline					show only the ID and the message for every commit done so far
git log --oneline --abbrev-commit   show only part of the commit ID

cat .git/refs/heads/master			show the checksum of the commit pointed by HEAD in the master branch

git status 							returns status of the repository:
										current branch
										uncommitted files (stored in the staging index)
										untracked files (files in the working directory to be added/removed to the staging index)

ROLLBACK AN UNSTAGED FILE (UNDO-like)
git checkout -- file		replace the messed up file of the wroking directory with the last committed version of that file

UNSTAGE FILES
used if we send a file to the staging area and we modify it before commit:
git add file
echo "change" >> file

now we can:
git add file				overwrites file in the staging area
OR
git reset HEAD file			unstage

MODIFY A COMMITTED FILE WITHOUT A NEW COMMIT
possible only for the very last commit!!! Don't use it if possible....
git commit --amend "description"

REVERT TO AN OLD COMMIT
Receive a copy of an old version of the branch (is not going to delete the newer ones!is just a copy)
git checkout id_of_the_commit				checkout the whole branch
git checkout id_of_the_commit -- file		checkout only the file specified at that point in time

DIFF
git feature to check differences between 2 versions of a file

git diff file

if we stage new/file first....git add file
git diff --staged is going to tell us which changes have been made to file

RESET
There are 3 types of reset in git:
	git reset --soft id_commit 		moves the HEAD to the specified commit(undo a commit)
	git reset --mixed id_commit		moves the HEAD and the staging index to whatever they were in the specified commit(undo a staging
	git reset --hard id_commit		completely reverts the commit (DANGEROUS...undo a change in the files)


BRANCHES
git branch				show all the branches created(* is on the current branch)
git branch my_branch	create a branch called my_branch
git checkout my_branch	makes my_branch the current branch in use

CREATE A PATCH
git format-patch original_branch..new_branch
git format-patch -o patches/ -3		create a patch for each one of the last 3 commits and save 
									them in patches folder

git format-patch --subject-prefix="prefix]["  add prefix in the subject of the email-format patch

SEND EMAIL
script/get_maintainer.pl my_patch.patch

git send-email --to x@y.z --cc a@b.c --chain-reply-to --in-reply-to=last_message_id patches/*


